@implements IDisposable
@if (!IsDisplayed) return;

<div class="position-fixed bottom-0 end-0 p-3"
     style="z-index: 1">
    <div class="toast text-white bg-danger show">
        <div class="toast-header" />
        <div class="toast-body">
            @foreach (var message in Context.GetValidationMessages())
            {
                <div>@message</div>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EditContext Context { get; set; }
    protected bool IsDisplayed { get; set; }

    private void Rerender(object sender, ValidationStateChangedEventArgs args)
    {
        IsDisplayed = Context.GetValidationMessages().Any();
        StateHasChanged();
    }

    protected override void OnInitialized()
        => Context.OnValidationStateChanged += Rerender;

    public void Dispose()
        => Context.OnValidationStateChanged -= Rerender;
}
